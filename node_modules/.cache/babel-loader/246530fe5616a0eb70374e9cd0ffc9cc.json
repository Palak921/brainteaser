{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\palak\\\\Desktop\\\\React\\\\DailyJournal\\\\quizapp\\\\src\\\\containers\\\\Auth.js\";\nimport React, { Component } from 'react'; // import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\nimport Input from './Input'; // import Button from '../../components/UI/Button/Button';\n\nimport { Button } from '@material-ui/core'; // import Spinner from '../../components/UI/Spinner/Spinner';\n\nimport './Auth.css'; // import * as actions from '../../store/actions/index';\n// import { updateObject, checkValidity } from '../../shared/utility';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {// const updatedControls = updateObject( this.state.controls, {\n      //     [controlName]: updateObject( this.state.controls[controlName], {\n      //         value: event.target.value,\n      //         valid: checkValidity( event.target.value, this.state.controls[controlName].validation ),\n      //         touched: true\n      //     } )\n      // } );\n      // this.setState( { controls: updatedControls } );\n    };\n\n    this.submitHandler = event => {//     event.preventDefault();\n      //     this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    // console.log(classes.Auth);\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {// this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this));\n\n    if (this.props.loading) {// form = <Spinner />\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.props.error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {// authRedirect = <Redirect to={this.props.authRedirectPath} />\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Auth\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Welcome to our quiz App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Register yourself or Sign in to proceed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), authRedirect, errorMessage, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.submitHandler,\n        children: form\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"secondary\",\n        onClick: this.switchAuthModeHandler,\n        btnType: \"Danger\",\n        children: [\"SWITCH TO \", this.state.isSignup ? 'SIGNIN' : 'SIGNUP']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {// onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\n    // onSetAuthRedirectPath: () => dispatch( actions.setAuthRedirectPath( '/' ) )\n  };\n}; // export default connect( mapStateToProps, mapDispatchToProps )( Auth );\n\n\nexport default Auth;","map":{"version":3,"sources":["C:/Users/palak/Desktop/React/DailyJournal/quizapp/src/containers/Auth.js"],"names":["React","Component","Input","Button","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","submitHandler","switchAuthModeHandler","setState","prevState","componentDidMount","props","buildingBurger","authRedirectPath","render","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n// import { connect } from 'react-redux';\r\n// import { Redirect } from 'react-router-dom';\r\n\r\nimport Input from './Input';\r\n// import Button from '../../components/UI/Button/Button';\r\nimport { Button } from '@material-ui/core';\r\n// import Spinner from '../../components/UI/Spinner/Spinner';\r\nimport './Auth.css';\r\n// import * as actions from '../../store/actions/index';\r\n// import { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        // console.log(classes.Auth);\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            // this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        // const updatedControls = updateObject( this.state.controls, {\r\n        //     [controlName]: updateObject( this.state.controls[controlName], {\r\n        //         value: event.target.value,\r\n        //         valid: checkValidity( event.target.value, this.state.controls[controlName].validation ),\r\n        //         touched: true\r\n        //     } )\r\n        // } );\r\n        // this.setState( { controls: updatedControls } );\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        //     event.preventDefault();\r\n        //     this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return { isSignup: !prevState.isSignup };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n        )\r\n        );\r\n\r\n        if (this.props.loading) {\r\n            // form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if (this.props.error) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            // authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className=\"Auth\">\r\n                <h3>Welcome to our quiz App</h3>\r\n                <h5>Register yourself or Sign in to proceed!</h5>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    {/* <Button btnType=\"Success\">SUBMIT</Button> */}\r\n                </form>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    onClick={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        // onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\r\n        // onSetAuthRedirectPath: () => dispatch( actions.setAuthRedirectPath( '/' ) )\r\n    };\r\n};\r\n\r\n// export default connect( mapStateToProps, mapDispatchToProps )( Auth );\r\nexport default Auth;"]},"metadata":{},"sourceType":"module"}
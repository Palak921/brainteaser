{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\palak\\\\Desktop\\\\React\\\\DailyJournal\\\\quizapp\\\\src\\\\containers\\\\Auth.js\";\nimport React, { Component } from 'react'; // import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import Input from '../../components/UI/Input/Input';\n// import Button from '../../components/UI/Button/Button';\n// import Spinner from '../../components/UI/Spinner/Spinner';\n\nimport classes from './Auth.css'; // import * as actions from '../../store/actions/index';\n// import { updateObject, checkValidity } from '../../shared/utility';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = updateObject(this.state.controls, {\n        [controlName]: updateObject(this.state.controls[controlName], {\n          value: event.target.value,\n          valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 20\n      }, this);\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.props.error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.authRedirectPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 28\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Auth,\n      children: [authRedirect, errorMessage, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.submitHandler,\n        children: [form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        clicked: this.switchAuthModeHandler,\n        btnType: \"Danger\",\n        children: [\"SWITCH TO \", this.state.isSignup ? 'SIGNIN' : 'SIGNUP']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["C:/Users/palak/Desktop/React/DailyJournal/quizapp/src/containers/Auth.js"],"names":["React","Component","classes","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","componentDidMount","buildingBurger","authRedirectPath","onSetAuthRedirectPath","render","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","actions","setAuthRedirectPath","connect"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n// import { connect } from 'react-redux';\r\n// import { Redirect } from 'react-router-dom';\r\n\r\n// import Input from '../../components/UI/Input/Input';\r\n// import Button from '../../components/UI/Button/Button';\r\n// import Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.css';\r\n// import * as actions from '../../store/actions/index';\r\n// import { updateObject, checkValidity } from '../../shared/utility';\r\n \r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount () {\r\n        if ( !this.props.buildingBurger && this.props.authRedirectPath !== '/' ) {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = ( event, controlName ) => {\r\n        const updatedControls = updateObject( this.state.controls, {\r\n            [controlName]: updateObject( this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity( event.target.value, this.state.controls[controlName].validation ),\r\n                touched: true\r\n            } )\r\n        } );\r\n        this.setState( { controls: updatedControls } );\r\n    }\r\n\r\n    submitHandler = ( event ) => {\r\n        event.preventDefault();\r\n        this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState( prevState => {\r\n            return { isSignup: !prevState.isSignup };\r\n        } );\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for ( let key in this.state.controls ) {\r\n            formElementsArray.push( {\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            } );\r\n        }\r\n\r\n        let form = formElementsArray.map( formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\r\n        ) );\r\n\r\n        if ( this.props.loading ) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if ( this.props.error ) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if ( this.props.isAuthenticated ) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\r\n        onSetAuthRedirectPath: () => dispatch( actions.setAuthRedirectPath( '/' ) )\r\n    };\r\n};\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )( Auth );"]},"metadata":{},"sourceType":"module"}